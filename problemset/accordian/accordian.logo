#!/usr/local/bin/logo

;; "Accordian" Patience

;; Problem statement taken from:
;; http://www.streamtech.nl/problemset/127.html

;; A card is represented as a word, two chars long. Ten of clubs is TC.
to rungame :stacks
  make "stepped (astep :stacks)
  if (:stepped = :stacks) [ output :stacks ]

  output (rungame :stepped)
end

;; fput is cons.
to astep :stacks
  if (:stacks = []) [ output [] ]

  if (count :stacks) >= 4 [ output astep.four :stacks ]

  if (count :stacks) >= 2 [ output astep.two :stacks ]

  output fput (first :stacks) (astep butfirst :stacks)
end

to astep.four :stacks
  make "a (first (item 1 :stacks))
  make "as (butfirst (item 1 :stacks))

  make "b (first (item 2 :stacks))
  make "bs (butfirst (item 2 :stacks))

  make "c (first (item 3 :stacks))
  make "cs (butfirst (item 3 :stacks))

  make "d (first (item 4 :stacks))
  make "ds (butfirst (item 4 :stacks))

  make "rest (drop 4 :stacks)

  if (matches :b :a) [
    output nonempty 
              (sentence (list (fput :b (fput :a :as))
                              :bs
                              (fput :c :cs)
                              (fput :d :ds))
                        rest)]

  if (matches :c :b) [
    output nonempty 
              (sentence (list (fput :a :as)
                              (fput :c (fput :b :bs))
                              :cs
                              (fput :d :ds))
                        rest)]
  if (matches :d :a) [
    output nonempty 
              (sentence (list (fput :d (fput :a :as))
                              (fput :b :bs)
                              (fput :c :cs)
                              :ds)
                        rest)]

  output fput (first :stacks) (astep butfirst :stacks)
end

to astep.two :stacks
  make "a (first (item 1 :stacks))
  make "as (butfirst (item 1 :stacks))

  make "b (first (item 2 :stacks))
  make "bs (butfirst (item 2 :stacks))

  make "rest drop 2 :stacks

  if (matches :b :a) [
    output nonempty 
              (sentence (list (fput :b (fput :a :as))
                              :bs)
                        rest)]

  output fput (first :stacks) (astep butfirst :stacks)
end

to matches :c1 :c2
  output or ((first :c1) = (first :c2)) ((second :c1) = (second :c2))
end

to second :lst
  output item 2 :lst
end

to nonEmpty :lst
  output (filter [not emptyp ?] :lst)
end

to drop :n :lst
  if (:n > count :lst) [ (throw "error [trying to drop too many elements]) ]
  
  if (:n = 0) [ output :lst ]
  output (drop (:n - 1) (butfirst :lst))
end

to listToStacks :lst
  output map [ fput ? [] ] lst
end

to readgames :fn
  openread :fn
  setread :fn

  make "lines []
  make "done "false
  
  while [not :done] [
    make "line (readlist)
    (if ((first first :line) = "#)
        [make "done "true]
        [make "lines (lput :line :lines)])
    
    if eof? [ make "done "true]
  ]
  closeall
  
  output (map [listToStacks ?] (mergetwos lines))
end

to mergetwos :lines
  if ((count :lines) < 2) [ output :lines ]
  
  output (fput (sentence (item 1 :lines) (item 2 :lines))
               (mergetwos (drop 2 :lines)))
end

to printgame :game
  (ifelse ((count :game) = 1)
    [ print [1 pile remaining: 52] ]
    [ type (count :game)
      type "| |
      type [piles remaining: ]
      foreach :game [type "| |
                     type (count ?) ]
      print "||])
end

to main
  make "games (readgames "input.txt)
  foreach :games [printgame rungame ?]
end

main
bye
