#!/usr/local/bin/logo

;; The five kinds of instructions shall be...
;; addone
;; addhash
;; forward
;; backward
;; cases

make "commands [addone addhash forward backward cases]

make "readcbuffer []
;; Version of readchar that has pushback too!!
to readc
  ifelse (:readcbuffer = []) [
    ;; print [it's empty]
    output (readchar)
  ] [
    make "c (first :readcbuffer)
    make "readcbuffer (bf :readcbuffer)
    output :c
  ]
end

to unreadc :c
  make "readcbuffer (fput :c :readcbuffer)
end

;; Given a filename, return the abstract syntax list.
;; That's a list of lists that will look like:
;; [ [cmd number] [cmd number] ... ]
to loadinstructions :fn
  openread :fn
  setread :fn

  make "instructions []
  make "done "false
  make "hashcount 0
  make "onecount 0
  make "prev "false

  while [not :done] [
    make "c (readc)
    ;; print :c

    if (:c = "\;) [ignore (readlist)]

    if (:c = "1) [
      make "onecount (:onecount + 1)
    ]

    if (:c = "#) [
      make "hashcount (:hashcount + 1)
    ]

    if (and (:c <> "#) (:hashcount > 0)) [
      
      if (:hashcount > 5) [
        print [syntax error, too many hashes]
        bye
      ]
      make "cmd (item :hashcount :commands)
      
      make "instructions (lput (sentence :cmd :onecount) :instructions)
      make "hashcount 0
      make "onecount 0
    ]

    if eof? [ make "done "true]
  ]
  closeall
  
  output :instructions
end

to testreadc :fn
  openread :fn
  setread :fn

  make "instructions []
  make "done "false

  make "instructions (fput [addone 2] :instructions)
  make "instructions (fput [forward 3] :instructions)

  make "c (readc)
  print :c
  make "c (readc)
  print :c
  unreadc :c
  make "c (readc)
  print :c
end

to interpret :instructions
  make "ip 0
  make "len (count :instructions)

  while ["true] [
    ;; print plist "thestore
    if (:ip > :len) [
      print [crash: jumped off the end]
      print plist "thestore
      bye
    ]
    if (:ip < 0) [
      print [crash: jumped before the beginning]
      print plist "thestore
      bye
    ]
    if (:ip = :len) [
      print [successful termination.]
      print plist "thestore
      bye
    ]

    make "cmd first (item (:ip + 1) :instructions)
    make "immediate first butfirst (item (:ip + 1) :instructions)

    ;; print (sentence cmd immediate)

    if (:cmd = "addone) [
      pprop "thestore :immediate (lput "1 (gprop "thestore :immediate))
      make "ip (:ip + 1)
    ]
    if (:cmd = "addhash) [
      pprop "thestore :immediate (lput "# (gprop "thestore :immediate))
      make "ip (:ip + 1)
    ]
    if (:cmd = "forward) [
      make "ip (:ip + :immediate)
    ]
    if (:cmd = "backward) [
      make "ip (:ip - :immediate)
    ]
    if (:cmd = "cases) [
      ifelse ((count (gprop "thestore :immediate)) = 0) [
        make "ip (:ip + 1)
      ]
      [
        if ((first (gprop "thestore :immediate)) = "1) [ make "ip (:ip + 2) ]
        if ((first (gprop "thestore :immediate)) = "#) [ make "ip (:ip + 3) ]
        pprop "thestore :immediate (butfirst (gprop "thestore :immediate))
      ]
    ]
  ]
end


to main
  make "instructions (loadinstructions "addition.os)

  print [running this program]
  print :instructions

  interpret :instructions
end

main
bye
