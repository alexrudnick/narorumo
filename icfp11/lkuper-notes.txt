* Notes

Micro-optimization opportunity:

((S (K K)) I) --> K

(in general:)

S (K e) I --> e

Before optimization:
246={3260,I}
247={0,I}
248={0,I}
249={0,I}
250={0,I}
251={0,I}
252={0,I}
253={0,I}
254={0,I}
255={0,I}

After optimization on the Y combinator:
246={3250,I}
247={0,I}
248={0,I}
249={0,I}
250={0,I}
251={0,I}
252={0,I}
253={0,I}
254={0,I}
255={0,I}

A whole ten hit points!  Woooo!

And when the fireball is optimized as well:
246={2564,I}
247={0,I}
248={0,I}
249={0,I}
250={0,I}
251={0,I}
252={0,I}
253={0,I}
254={0,I}
255={0,I}

** hand-application of Y to the fireball

Hand-application:


((lambda (f)
   ((lambda (x)
      (f (lambda (y)
           ((x x) y))))
    (lambda (x)
      (f (lambda (y)
           ((x x) y))))))
 (lambda (f)
   (lambda (slot)
     ((lambda (ignoreme)
        (f slot))
      (dec slot)))))

==>

((lambda (x)
   ((lambda (f)
      (lambda (slot)
        ((lambda (ignoreme)
           (f slot))
         (dec slot)))) (lambda (y)
                         ((x x) y))))
 (lambda (x)
   ((lambda (f)
      (lambda (slot)
        ((lambda (ignoreme)
           (f slot))
         (dec slot)))) (lambda (y)
                         ((x x) y)))))

==>

((lambda (f)
   (lambda (slot)
     ((lambda (ignoreme)
        (f slot))
      (dec slot))))
 (lambda (y)
   (((lambda (x)
       ((lambda (f)
          (lambda (slot)
            ((lambda (ignoreme)
               (f slot))
             (dec slot)))) (lambda (y)
                             ((x x) y))))
     (lambda (x)
       ((lambda (f)
          (lambda (slot)
            ((lambda (ignoreme)
               (f slot))
             (dec slot)))) (lambda (y)
                             ((x x) y))))) y)))

==>

(lambda (slot)
  ((lambda (ignoreme)
     ((lambda (y)
        (((lambda (x)
            ((lambda (f)
               (lambda (slot)
                 ((lambda (ignoreme)
                    (f slot))
                  (dec slot)))) (lambda (y)
                                  ((x x) y))))
          (lambda (x)
            ((lambda (f)
               (lambda (slot)
                 ((lambda (ignoreme)
                    (f slot))
                  (dec slot)))) (lambda (y)
                                  ((x x) y))))) y)) slot))
   (dec slot)))


** applying the identity function, and then 5, to the Y combinator

((lambda (f)
  ((lambda (x)
     (f (lambda (y)
          ((x x) y))))
   (lambda (x)
     (f (lambda (y)
          ((x x) y))))))
 (lambda (a) a))

==>

(lambda (y)
  (((lambda (x)
      ((lambda (a) a) (lambda (y)
                        ((x x) y))))
    (lambda (x)
      ((lambda (a) a) (lambda (y)
                        ((x x) y)))))
   y))

If I were to apply 5 to that...

((lambda (y)
   (((lambda (x)
       ((lambda (a) a) (lambda (y)
                         ((x x) y))))
     (lambda (x)
       ((lambda (a) a) (lambda (y)
                         ((x x) y)))))
    y))
 5)

==>

(((lambda (x)
    ((lambda (a) a) (lambda (y)
                      ((x x) y))))
  (lambda (x)
    ((lambda (a) a) (lambda (y)
                      ((x x) y)))))
 5)

==>

(((lambda (x)
    ((lambda (a) a) (lambda (y)
                      ((x x) y))))
  (lambda (x)
    ((lambda (a) a) (lambda (y)
                      ((x x) y)))))
 5)

==>

((lambda (y)
  (((lambda (x)
      ((lambda (a) a) (lambda (y)
                        ((x x) y))))
    (lambda (x)
      ((lambda (a) a) (lambda (y)
                        ((x x) y))))) y))
 5)

That's what you had before, so...infinite loop.

** more stuff

Y combinator (applicative-order version, which is the kind we want):
λf. (λx. f (λy. x x y)) (λx. f (λy. x x y))

In Scheme:

(lambda (f)
  ((lambda (x)
     (f (lambda (y)
          ((x x) y))))
   (lambda (x)
     (f (lambda (y)
          ((x x) y))))))

Eventually, we want to write:

(Y (lambda (f)
     (lambda (slot)
       ((lambda (ignoreme)
          (f slot))
        (dec slot)))))

The argument to Y,

(lambda (f)
  (lambda (slot)
    ((lambda (ignoreme)
       (f slot))
     (dec slot))))

, translates to

((S
  ((S (K S))
   ((S
     ((S (K S))
      ((S ((S (K S)) ((S (K K)) (K S)))) 
       ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) I)))))
    ((S ((S (K S)) ((S (K K)) (K K)))) (K I)))))
 ((S ((S (K S)) ((S (K K)) (K dec)))) (K I)))

(S
  ((S (K S))
   ((S
     ((S (K S))
      ((S ((S (K S)) ((S (K K)) (K S)))) 
       ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) I)))))
    ((S ((S (K S)) ((S (K K)) (K K)))) (K I)))))

, or we might also like to do the moral equivalent of

(begin
  (dec slot)
  (dec slot)
  (f slot))

, so the whole thing would be

(lambda (f)
  (lambda (slot)
    ((lambda (ignoremetoo)
       ((lambda (ignoreme)
          (f slot))
        (dec slot)))
     (dec slot))))

which, translated, looks like:

((S
  ((S (K S))
   ((S
     ((S (K S))
      ((S ((S (K S)) ((S (K K)) (K S))))
       ((S
         ((S (K S))
          ((S ((S (K S)) ((S (K K)) (K S))))
           ((S
             ((S (K S))
              ((S ((S (K S)) ((S (K K)) (K S))))
               ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) (K S))))))
            ((S
              ((S (K S))
               ((S ((S (K S)) ((S (K K)) (K S))))
                ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) (K K))))))
             ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) I)))))))
        ((S
          ((S (K S))
           ((S ((S (K S)) ((S (K K)) (K S))))
            ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) (K K))))))
         ((S ((S (K S)) ((S (K K)) (K K)))) (K I)))))))
    ((S
      ((S (K S))
       ((S ((S (K S)) ((S (K K)) (K S)))) ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) (K dec))))))
     ((S ((S (K S)) ((S (K K)) (K K)))) (K I))))))
 ((S ((S (K S)) ((S (K K)) (K dec)))) (K I)))


** OK...
 
We want this:

((S
  (horace
   ((S
     (horace
      ((S (horace (greg (K S))))
       ((S (horace fanny)) (greg I)))))
    ((S (horace fanny)) ian))))
 ((S (horace (greg (K dec)))) ian))

fanny
(greg (K K))

greg
(S (K K))

horace
(S (K S))

ian
(K I)

** Why we want the Y combinator

(Y (lambda (f)
     (lambda (slot)
       (begin
         (dec slot)  ;; side effect here.
         (f slot)
         ))))

or, instead of the begin (lambda trick via Adam Foltzer's blog):

((lambda (ignoreme)
   (f slot))
 (dec slot))

Ths returns a recursive function that side effects until we run out of
operations.

** Applying a slot to a slot

(help 0 1 16)

2, 0, help
2, 0, zero
1, K, 0
1, S, 0
2, 0, succ
2, 0, zero  #### at this point we have help(zero)(1) in slot 0.
2, 1, zero
1, succ, 1
1, dbl, 1
1, dbl, 1
1, dbl, 1
1, dbl, 1   #### ... and 16 in slot 1.
1, K, 0     ### K(help 0 1)
1, S, 0     ### S(K(help 0 1))
2, 0, get   ### S(K(help 0 1) get)
1, K, 0     ### K(S(K(help 0 1) get))
1, S, 0     ### S(K(S(K(help 0 1) get)))
2, 0, succ  ### S (K(S(K(help 0 1) get))) succ
2, 0, zero  ### S (K...) succ 0

builds up
0={10000,S(K(S(K(help(zero)(1)))(get)))(succ)}
1={10000,16}

0={9984,I}
1={10017,16}

** In general

We'd like to solve the general problem of applying the contents of
slot N to the contents of slot 0.

The way to do this is to build up function foo in slot N with the
following wrapping:

S( K( S(K(foo))(get) ) ) I

And then apply slot N to the 'zero' card.

** Why does this work?

S(K(foo))(get) is the same as:

define fooget =
lambda x:
 return foo (get x)

Taking K of that gives us:

define foogetK =
lambda x:
 fooget

Taking S of foogetK and I gives us:

lambda x:
  h <-- foogetK x
  y <-- I x
  z <-- h y
  return z

which can be simplified as

lambda x:
  fooget x

which is the same as fooget.  Recall that fooget just get the contents
of a slot and applies foo to it.  So when we apply the function we've
built up in slot N to the 'zero' card, we'll be getting the contents
of slot 0 and applying foo to it.  The result will be left in slot 0.

** Want to apply to the contents of a different slot?

To apply function foo to the contents of slot 1, build up function foo
in slot N with the following wrapping:

S( K( S(K(foo))(get) ) ) succ

And then apply slot N to the 'zero' card.  The result will be left in
slot 1.




