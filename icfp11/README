First of all, thanks to the contest organizers for crafting such a
beautiful problem for us to hack on this year.  We had a great time
with it!  Over the last 72 hours, we've laughed, we've cried, we've
written a lot of Scheme and Python, and we've implemented several
strategies for playing Lambda: The Gathering:

  * The *dumbest possible* strategy (src/dumbestpossible.py), in which
    we simply play the 'dec' card 10,000 times on the opponent's slot
    255 (which, of course, takes 20,000 turns, because each time we
    have to set up the 'zero' argument to 'dec' in a slot), and then do
    the same on their slots 254 and 253 (taking 30,000 and 40,000
    turns, respectively).  Since killing off only three of the
    opponent's slots (and that only if they don't fight back very
    hard) is no way to win, we moved on to implementing...

  * The *fireball* strategy (src/yfireball.py), in which we decided
    that in order to kill more of the opponent's slots, we needed to
    build an applicative-order Y combinator out of S, K, and I
    combinators and then apply it to an SKI-encoded "fireball"
    function, which would take a slot number as an argument and then
    apply 'dec' in a loop on that slot number.  In order to build
    these gigantic SKI expressions, we defined several
    meta-combinators, which we like to call our 'friends' and which
    are named, respectively, 'abe', 'clarice', 'dianne', 'fanny',
    'greg', 'horace', 'ian', 'june', and 'kelly'.  (If you're
    wondering what happened to the letters B and E, I'm sorry to
    report that 'benny' was lost in a refactoring incident and
    'eugene' was captured by a rogue quantifier.  May they remain in
    our hearts.)  Our translation from lambda calculus to
    SKI-with-friends (see src/lc-to-ski.scm) is powered by Oleg
    Kiselyov's clever "pmatch" pattern matcher for Scheme.

    We were incredibly excited that we managed to construct a Y
    combinator and trigger a recursive process.  Along the way, we
    also figured out that not only is it possible to apply the
    contents of slot 0 to those of slot 1, as explained in the problem
    description, but it's actually possible to apply the contents of
    arbitrary slots to each other, as long as we pass the *address* of
    one of the slots in slot 0 or 1!  (See src/ltg_util.py.)
    Unfortunately, our Y fireball requires so many function
    applications that it doesn't do all that much damage on a given
    turn and is therefore not much more effective than the dumbest
    possible strategy: it can knock off about 9 of the opponent's
    slots, provided that they don't fight back. So we moved on to our
    next approach, which is less theoretically interesting, but more
    effective in practice:

  * The *loop unrolling* strategy (src/unrolled.py), in which we
    decided to just write the moral equivalent of

    (lambda (slot)
      (begin
        (dec slot)
        (dec slot)
        (dec slot)
        ...
        (dec slot)))

    using SKI expressions, with the 'begin' encoded using lambda, and
    with exactly as many (dec slot) calls as we could fit in 1000
    function applications, which turned out to be about 67.  These
    unrolled loops went a lot faster: we could knock off about 60 of
    the opponent's slots!  But we wanted to go even faster, so
    finally, we implemented...

  * The *linked list* strategy, in which we observed that the S
    combinator provides a handy way to sequence execution of side
    effects like 'dec'.  In particular, we can construct expressions
    of the form

    S( S( S( S(dec, dec), dec), dec), dec)

    and then trigger five 'dec' operations on say, slot 0 by applying
    this function to 'zero'.  This turned out to be our fastest
    strategy yet: we can take out *all* our opponent's slots, again
    provided they don't fight back much.  To try to ensure that they
    won't, we attack the opponent's low-numbered slots first, since
    we've found that those slots tend to be the most useful.

  When the leaderboard was frozen, we were in 76th place -- our best
  showing in an ICFP contest so far.  We're pleased with how we did,
  but we'd love to do better.  If we had more time, we'd like to try
  out the 'zombie' instruction and take advantage of an additional
  1000 steps of computation (per turn, per slot!) on the opponent's
  side.  Some of the folks who are beating us are surely doing this!
  And, of course, it would be great to be able to compile from lambda
  calculus all the way to Lambda: The Gathering instructions,
  including a CPS conversion pass (or similar flattening pass) and a
  slot allocation pass -- we're doing our flattening and slot
  allocation manually, and it ain't pretty.

  Thanks again for putting on such a great competition this year.

  -- Lindsey Kuper and Alex Rudnick (Team K&R)
     Mountain View, California
     Sunday, June 19, 2011
