Fri Jun 17 13:41:01 PDT 2011

0={10000,S(K(S(K(help(zero)(1)))(get)))(succ)}

so all this business:
S(K(S(K(help(zero)(1)))(get)))(succ)

f: (K(S(K(help(zero)(1)))(get)))
g: succ
x: 0

This causes...
help(zero)(1) to happen on the contents of slot 1.

template:
f: (K(S(K(BEHAVIOR))(get)))
g: succ
x: 0

... causes BEHAVIOR(*slot1), yes?

then:
all of that, applied to 0.

f(0) => ... help 0 1 16.

So S (K f) (K g) I ==> (f g)

S(K(help(zero)(1)))(get)

So like, K(...)(0) and get(0) goes off, and we get whatever was inside the K,
applied to whatever was in slot 0.

... so how could we do this for dec? What we really want is the Y combinator
and...
S f g x
((f x) (g x))


at turn 19, we have...
0={10000,S(K(S(K(help(zero)(1)))(get)))(succ)}
then apply that slot to 0.

resulting in:
(S (K(help(zero)(1))) (get) 1)
==> help (zero) 1 (get 1)

-------------------------
| ycombinator interlude |
-------------------------

Question here is: do S and K take three and two arguments, in this case? They
must, right?

Y' = S S K (S (K (S S (S (S S K)))) K)


(((S S) K)
  (S (K ((S S)
         (S
          ((S S)
           K))))
           K) )

Y' = (((S S) K)
      ((S (K ((S S)
              (S ((S S) K)))))
        K))


(define fact
  (Y (lambda (f)
       (lambda (n)
         (if (<= n 0)
             1
             (* n (f (- n 1))))))))

Alright, let's skip that business. Here's the Y combinator, fully
parenthesized.

Y = S (K (S I I)) (S (S (K S) K) (K (S I I)))
    ------------- ---------------------------
      abe         benny

building abe:
play S
Apply the S to I
Apply the S to I again.
(now we have (S I I))
Apply K to that.

2,0,S
2,0,I
2,0,I
1,K,0

alright, now let's build benny, in slot 1. Benny has two parts, 
(S (S (K S) K) (K (S I I)))
   ----------- -----------
   clarice      dianne

clarice goes in slot 1 to start with.
2,1,S
1,K,1
1,S,1
2,1,K
1,S,1 ## Now put at S around clarice in slot 1.

Now let's build dianne in slot 2.
1,S,2
2,2,I
1,K,2


Current world state:
0={10000,K(S(I)(I))} # abe
1={10000,S(S(K(S))(K))} # clarice with the extra S
2={10000,K(S(I)(I))}    # dianne.

Goal: apply clarice with S to dianne, have result show up in slot 1.


So here's the plan.

Build clarice in slot 0 (including the front S).
Build dianne in slot 1.
Apply slot 0 to slot 1; and now we have benny in slot 0.
Now put a 0 in slot 1, and use "get": benny is in slot 1.
Now build abe in slot 0, add an S.
Apply slot 0 to slot 1, and we have the Y combinator in slot 0.




### the commands to apply slot 0 to slot 1.
1, K, 0     ### K(FOO)
1, S, 0     ### S(K(FOO))
2, 0, get   ### S(K(FOO) get)
1, K, 0     ### K(S(K(FOO) get))
1, S, 0     ### S(K(S(K(FOO) get)))
2, 0, succ  ### S (K(S(K(FOO) get))) succ
2, 0, zero  ### S  succ 0

Does this work in general? Let's see?
Put succ in slot 0.
2, 0, succ

Put 1 in slot 1.
2,1,zero
1,succ,1


1
K
0
1
S
0
2
0
get
1
K
0
1
S
0
2
0
succ
2
0
zero

OK, this works.

Sat Jun 18 00:06:47 PDT 2011

-------------------------
| building the fireball |
-------------------------
We want this:
((S
  (horace
   ((S
     (horace
      ((S (horace (greg (K S))))
       ((S (horace fanny)) (greg I)))))
    ((S (horace fanny)) ian))))
 ((S (horace (greg (K dec)))) ian))


right part: ((S (horace (greg (K dec)))) ian)
plan...
build in 1: (K dec)
build in 0: greg
smash together to get (greg (K dec)) in 0
copy it to 1.
build horace in 0.
smash together to get (horace (greg (K dec))) in 0.
Wrap with an S.
build ian in 1.
smash together to get ((S (horace (greg (K dec)))) ian) in 0.

copy it somewhere else.

It might be easier if we could build horace around something else? Is that
possible?

building the left part:
(S (horace
((S (horace ((S (horace (greg (K S)))) ((S (horace fanny)) (greg I))))) ## june
 ((S (horace fanny)) ian))))   ## kelly

june:
(S (horace ((S (horace (greg (K S)))) ((S (horace fanny)) (greg I)))))
            ------------------------- -----------------------------
             june1                      june2

# june1: takes up slots 0 and 1.
(S (horace (greg (K S))))
put greg in 0
put S in 1
put K around the S
smash together
copy (greg (K S)) to 1
put horace in 0
smash together for (horace (greg (K S)))
wrap with an S for (S (horace (greg (K S))))

# june2: takes up slots 0 and 1.
((S (horace fanny)) (greg I))
build fanny (always in 0)
move fanny to 1. 
build horace in 0
smash together to get (horace fanny) in 0
wrap with an S
build greg in slot 1
apply greg to I
smash together to get ((S (horace fanny)) (greg I))

plan for june:
build june2 in slot 0.
copy june2 to slot 2.
build june1 in slot 0,1.
copy june2 back to slot 1.
smash together to get (june1 june2) in slot 0.
copy (june1 june2) to slot 1.
build horace in slot 0
smash together to get (horace june1 june2) in slot 0.
wrap with an S for (S (horace june1 june2)) in slot 0, which is just june.

kelly: (will blow away 0,1,2)
((S (horace fanny)) ian)
build fanny (always in 0)
build horace in 2.
move fanny to 1. 
move horace to 0.
smash together to get (horace fanny) in 0.
put an S around (horace fanny) in 0 to get (S (horace fanny))
build ian in 1.
smash together to get ((S (horace fanny)) ian) in 0.

The whole left part is just:
(S (horace (june kelly)))

left part plan:
build kelly.
copy kelly to 2.
build june in slots 0,1
copy kelly to slot 1
smash together to get (june kelly) in 0
copy (june kelly) to 1
build horace in 0
smash together to get (horace (june kelly)) in 0
wrap with an S for the whole left part.

whole fireball plan:
build the right part, copy it to 3.
build the left part, now it's in 0
copy right part from 3 to 1.
smash together for whole fireball.

Then:
copy fireball to 2
build y combinator in 0
copy fireball to 1
smash together for recursive fireball
